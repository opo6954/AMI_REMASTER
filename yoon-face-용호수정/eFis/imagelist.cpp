// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "imagelist.h"

/////////////////////////////////////////////////////////////////////////////
// CImageList1

IMPLEMENT_DYNCREATE(CImageList1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CImageList1 properties

long CImageList1::GetSizeX()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetSizeX(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CImageList1::GetSizeY()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetSizeY(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CImageList1::GetBMultiSelect()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CImageList1::SetBMultiSelect(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CImageList1::GetKeyPreSet()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetKeyPreSet(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CImageList1::GetKeyDisable()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetKeyDisable(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CImageList1::GetSelectedDisplay()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetSelectedDisplay(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

BOOL CImageList1::GetHorizontalScroll()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CImageList1::SetHorizontalScroll(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

long CImageList1::GetDecorationType()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CImageList1::SetDecorationType(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CImageList1 operations

long CImageList1::AddImage(LPCTSTR pName, const VARIANT& pImage)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pName, &pImage);
	return result;
}

long CImageList1::InsertImageAt(long pos, LPCTSTR pName, const VARIANT& pImage)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pos, pName, &pImage);
	return result;
}

BOOL CImageList1::IsSelected(long pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pos);
	return result;
}

BOOL CImageList1::Select(long pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pos);
	return result;
}

BOOL CImageList1::SelectMultiple(const VARIANT& pArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&pArray);
	return result;
}

BOOL CImageList1::Deselect(long pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pos);
	return result;
}

BOOL CImageList1::DeselectMultiple(const VARIANT& pArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&pArray);
	return result;
}

void CImageList1::DeselectAll()
{
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageList1::RemoveAll()
{
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CImageList1::DeleteAt(long pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pos);
	return result;
}

void CImageList1::DeleteMultiple(const VARIANT& pArray)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &pArray);
}

void CImageList1::Reorder(const VARIANT& pArray)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &pArray);
}

CString CImageList1::GetName(long pos)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		pos);
	return result;
}

void CImageList1::DeleteSelected()
{
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CImageList1::AddBlankImage(LPCTSTR pName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pName);
	return result;
}

void CImageList1::SetImageAt(long Nth, const VARIANT& pDib)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Nth, &pDib);
}

long CImageList1::InsertBlankImageAt(long Nth, LPCTSTR pName)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Nth, pName);
	return result;
}

long CImageList1::GetNumSelected()
{
	long result;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CImageList1::ScrollToNthImage(long Nth)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Nth);
}

long CImageList1::GetNumItems()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageList1::GetNthSelected(long Nth)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Nth);
	return result;
}

long CImageList1::AddImagePtr(LPCTSTR pName, long pDib)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pName, pDib);
	return result;
}

long CImageList1::InsertImageAtPtr(long pos, LPCTSTR pName, long pDib)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pos, pName, pDib);
	return result;
}

void CImageList1::SetImageAtPtr(long pos, long pDib)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pos, pDib);
}

void CImageList1::SetDefaultTextColor(long color)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 color);
}

long CImageList1::GetDefaultTextColor()
{
	long result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageList1::SortByText(BOOL bDecending)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bDecending);
	return result;
}

long CImageList1::SortByColor(BOOL bDecending)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		bDecending);
	return result;
}

void CImageList1::SetTextColor(long pos, long color)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pos, color);
}

void CImageList1::Swap(long i, long j)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 i, j);
}

void CImageList1::ReorderPtr(long pOrder)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pOrder);
}

void CImageList1::Reserve(long nSize)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nSize);
}

void CImageList1::SetNamedImageAtPtr(long Nth, LPCTSTR pName, long pDib)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Nth, pName, pDib);
}

void CImageList1::SetNameAt(long pos, LPCTSTR pName)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pos, pName);
}

void CImageList1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
